include(cmake/helpers.cmake)

function(load_addon_libs target libs LOOKUP_DIR)
  install_dlls(${target} ${LOOKUP_DIR} dll)
  file(GLOB libs_ ${LOOKUP_DIR}/*.lib)
  set(${libs} ${libs_} PARENT_SCOPE)
endfunction()

function(ofAddon target addonName)
  set(ADDON_DIR ${OF_ROOT}/addons/${addonName})
  if (NOT EXISTS ${ADDON_DIR})
    message(FATAL_ERROR "Couldn't find addon: ${addonName}")
  endif()
  if (EXISTS ${ADDON_DIR}/src) 
    file(GLOB_RECURSE ADDON_SRC 
      ${ADDON_DIR}/src/*.cpp
      ${ADDON_DIR}/src/*.hpp
      ${ADDON_DIR}/src/*.h
      ${ADDON_DIR}/src/*.cc
      ${ADDON_DIR}/src/*.c
    )
    if (ADDON_SRC)
      if (NOT TARGET ${addonName})
        add_library(${addonName} STATIC ${ADDON_SRC})
        subdirlist(ADD_SRC_SUBDIRS ${ADDON_DIR}/src)
        target_include_directories(${addonName} PUBLIC ${ADDON_DIR}/src ${ADD_SRC_SUBDIRS})
        if (EXISTS ${ADDON_DIR}/common) 
          target_include_directories(${addonName} PUBLIC ${ADDON_DIR}/common)
        endif()
        target_link_libraries(${addonName} general openFrameworksLib)
      endif()
      target_link_libraries(${target} general ${addonName})
    endif()
  endif()

  if (EXISTS ${ADDON_DIR}/common) 
    target_include_directories(${target} PUBLIC ${ADDON_DIR}/common)
  endif()
  if (EXISTS ${ADDON_DIR}/libs) 
    subdirlist(SUBDIRS ${ADDON_DIR}/libs)
    foreach(subdir ${SUBDIRS})
      if (EXISTS ${subdir}/include) 
        target_include_directories(${target} PUBLIC ${subdir}/include)
      endif()
      if (EXISTS ${subdir}/lib) 
        if (WIN32)
          set(LIB_ROOT_DIR ${subdir}/lib/vs)
          if (EXISTS ${LIB_ROOT_DIR}) 
            file(GLOB libs ${LIB_ROOT_DIR}/*.lib)
            if (libs)
              set(LOOKUP_DIR ${LIB_ROOT_DIR})
            elseif(EXISTS ${LIB_ROOT_DIR}/x64)
              set(LOOKUP_DIR ${LIB_ROOT_DIR}/x64)
            elseif(EXISTS ${LIB_ROOT_DIR}/Debug)
              if (NOT EXISTS ${LIB_ROOT_DIR}/Release)
                message(FATAL_ERROR 
                  "Couldn't find library directory: ${LIB_ROOT_DIR}/Release. "
                  "Make sure the library is built for both debug and release configurations.")
              endif()

              load_addon_libs(${target} libs_debug ${LIB_ROOT_DIR}/Debug)
              load_addon_libs(${target} libs_optimized ${LIB_ROOT_DIR}/Release)
              
              list(LENGTH libs_debug list_count_d)
              list(LENGTH libs_optimized list_count)

              if (NOT ${list_count_d} EQUAL ${list_count})
                message(FATAL_ERROR "Debug and Release libs don't match")
              endif()

              math(EXPR range_len "${list_count} - 1")
              foreach(i RANGE ${range_len})
                list(GET libs_debug ${i} library_debug)
                list(GET libs_optimized ${i} library_optimized)
                target_link_libraries(${target} debug ${library_debug} optimized ${library_optimized})
              endforeach()
            endif()

            if (LOOKUP_DIR)
              load_addon_libs(${target} libs ${LOOKUP_DIR})
              target_link_libraries(${target} general ${libs})
            endif()
          endif()
        else()
          message(FATAL_ERROR "platform not supported")
        endif()
      endif()
    endforeach()
  endif()
endfunction()
